package bitcamp.java89.ems11.server.controller;

import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import bitcamp.java89.ems10.server.vo.TextBook;

public class TextBookController {
  private Scanner in;
  private PrintStream out;
  
  private String filename = "textbook-v1.6.data";
  private ArrayList<TextBook> booklist;
  private boolean changed;
  public TextBookController(Scanner in, PrintStream out) {
    booklist = new ArrayList<TextBook>();
    this.in = in;
    this.out = out;

    this.load();
  } 

  public boolean isChanged() {
    return changed;
  }
  @SuppressWarnings("unchecked")
  private void load() {
    FileInputStream in0 = null;
    ObjectInputStream in = null;

    try {
      in0 = new FileInputStream(this.filename);
      in = new ObjectInputStream(in0);

      booklist = (ArrayList<TextBook>)in.readObject();
      
    } catch (EOFException e) {
      //파일을 모두 읽었다.
    } catch (Exception e) {
      System.out.println("책 데이터 로딩 중 오류 발생!");
    } finally {
      try {
        in.close();
        in0.close();
      } catch (Exception e) {
        // close하다가 예외 발생하면 무시한다.
      }
    }
  }

  public void save() throws Exception {
    FileOutputStream out0 = new FileOutputStream(this.filename);
    ObjectOutputStream out = new ObjectOutputStream(out0);

    out.writeObject(booklist);
    changed = false;

    out.close();
    out0.close();
  }

  public boolean service() {
    
    while(true) {
      out.println("교재관리> ");
      out.println();
      
      String[] commands = in.nextLine().split("\\?");
      
      try {
        switch (commands[0]) {
        case "add": this.doAdd(commands[1]); break;
        case "list": this.doList(); break;
        case "view": this.doView(commands[1]); break;
        case "delete": this.doDelete(commands[1]); break;
        case "update": this.doUpdate(commands[1]); break;
        case "main": return true;
        case "quit": return false;
        default :
          System.out.println("지원하지 않는 명령입니다.");
        }
      } catch (IndexOutOfBoundsException e) {
        System.out.println("인덱스가 유효하지 않습니다1.");
      } catch (Exception e) {
        System.out.println("실행 중 오류가 발생했습니다2.");
      } //try - catch   
    } //while
  }
  private void doList() {
    for (TextBook textbook : booklist) {
      out.printf("%s,%s,%s,%s,%s,%s,%d,%d\n",
        textbook.getTitle(),
        textbook.getAuthor(),
        textbook.getPress(),
        textbook.getReleaseDate(),
        textbook.getLanguage(),
        textbook.getDescription(),
        textbook.getPage(),
        textbook.getPrice());
    }
  }
//클라이언트에서 보낸 데이터 형식
  // => add?title=자바의세계&author=천재&press=비트센터&releaseDate=2016&language=eng&description=justdoit&page=300&price=10000
  // => doAdd("add?title=자바의세계&author=천재&press=비트센터&releaseDate=2016&language=eng&description=justdoit&page=300&price=10000") 

  private void doAdd(String params) {
    String[] values = params.split("&");
    HashMap<String,String> paramMap = new HashMap<>();
    
    for (String value : values) {
      String[] kv = value.split("=");
      paramMap.put(kv[0], kv[1]);
    }

    TextBook textbook = new TextBook();
    textbook.setTitle(paramMap.get("title"));
    textbook.setAuthor(paramMap.get("author"));
    textbook.setPress(paramMap.get("press"));
    textbook.setReleaseDate(Integer.parseInt(paramMap.get("releaseDate")));
    textbook.setLanguage(paramMap.get("language"));
    textbook.setDescription(paramMap.get("description"));
    textbook.setPage(Integer.parseInt(paramMap.get("page")));
    textbook.setPrice(Integer.parseInt(paramMap.get("price")));
    
    if (existTitle(textbook.getTitle())) {
      out.println("같은 책이름이 존재합니다. 등록을 취소합니다.");
      return;
    }
    
    booklist.add(textbook);
    changed = true;
    out.println("등록하였습니다.");
  } 
  
  private boolean existTitle(String title) {
    for (TextBook textbook : booklist) {
      if (textbook.getTitle().equals(title.toLowerCase())) {
        return true;
      }
    }
    return false;
  }
  
  private void doView(String params) {
    String[] kv = params.split("=");
    
    for (TextBook textbook : booklist) {
      if (textbook.getTitle().equals(kv[1])) {
        out.println("------------------------------");
        out.printf("책이름: %s\n", textbook.getTitle());
        out.printf("저자: %s\n", textbook.getAuthor());
        out.printf("출판사: %s\n", textbook.getPress());
        out.printf("출판년도: %s\n", textbook.getReleaseDate());
        out.printf("언어: %s\n", textbook.getLanguage());
        out.printf("설명: %s\n", textbook.getDescription());
        out.printf("쪽수: %d\n", textbook.getPage());
        out.printf("가격: %d\n",textbook.getPrice());
      }
    }
  }


  private void doDelete(String params) {
    String[] kv = params.split("=");
    
    if (!existTitle(kv[1])) {
      out.println("해당 책이름이 존재하지 않습니다. 삭제를 취소합니다.");
      return;
    }
    loop:
      for (TextBook textbook : booklist) {
        if (textbook.getTitle().equals(kv[1])) {
          booklist.remove(textbook);
          break loop;
        }
      }
    changed = true;
    out.println("삭제하였습니다.");
  }
  // update?
  private void doUpdate(String params) {
    String[] values = params.split("&");
    HashMap<String,String> paramMap = new HashMap<>();
    
    for (String value : values) {
      String[] kv = value.split("=");
      paramMap.put(kv[0], kv[1]);
    }
    for (TextBook textbook : booklist) {
      if (textbook.getTitle().equals(paramMap.get("title"))) {
        textbook.setAuthor(paramMap.get("author"));
        textbook.setPress(paramMap.get("press"));
        textbook.setReleaseDate(Integer.parseInt(paramMap.get("releaseDate")));
        textbook.setLanguage(paramMap.get("language"));
        textbook.setDescription(paramMap.get("description"));
        textbook.setPage(Integer.parseInt(paramMap.get("page")));
        textbook.setPrice(Integer.parseInt(paramMap.get("price")));
        changed = true;
        out.println("업데이트 완료하였습니다.");
        return;
      }
    }
    out.println("해당 책이름이 존재하지 않습니다. 업데이트를 취소합니다.");
  }
}
  
